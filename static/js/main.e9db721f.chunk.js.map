{"version":3,"sources":["Space.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Space","prevProps","this","props","owner","checkForMoves","spaceColor","player1Color","player2Color","activeIndex","selectPiece","isKing","playerTurn","unselectPiece","movePiece","row","col","pieceColor","isActive","isOwned","style","backgroundColor","onClick","length","handleMove","width","height","fontSize","display","alignItems","justifyContent","borderRadius","opacity","Component","Board","state","spaces","pieceSize","lastRow","lastCol","turnMoves","square1Color","square2Color","skipOptions","gameWinner","initializeBoard","setState","prevState","forEach","rowIndex","evenCol","evenRow","push","selected","endingRow","endingCol","startingRow","startingCol","activeOwner","activePiece","isVacant","confirmPlacement","didJump","finalRowIndex","nextPlayer","console","log","validateSkips","removePiece","forwardOne","forwardTwo","skippedSpotOwner","skippedRowIndex","skippedColIndex","rowDifference","colDifference","validSkip","Math","abs","colIndex","piece","canSkip","normalSkippedVectors","normalDestinationVectors","destinationVectors","skippedVectors","i","twoAwayOwner","oneAwayOwner","space","checkForWin","status","some","changeSides","triggerHover","event","mouseX","pageX","mouseY","pageY","checkerBoard","map","spaceData","columnIndex","key","Fragment","position","pointerEvents","left","top","onMouseMove","gridTemplateRows","cursor","gridTemplateColumns","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e9db721f.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Space extends Component {\n\n    componentDidUpdate(prevProps) {\n        if(this.props.owner !== prevProps.owner){\n            this.props.checkForMoves()\n          }\n    }\n\n  render() {\n    let {\n      spaceColor,\n      player1Color,\n      player2Color,\n      activeIndex,\n      selectPiece,\n      isKing,\n      playerTurn,\n      unselectPiece,\n      movePiece,\n      owner,\n      row,\n      col\n    } = this.props\n\n    let pieceColor = owner === 'player1' ? player1Color : player2Color\n\n    let isActive = activeIndex[0] === row && activeIndex[1] === col\n\n    let isOwned = owner ===  playerTurn\n\n    let handleMove = () => {\n \n        // else \n        if (isActive) {\n            return unselectPiece()\n        } else if (isOwned){\n            selectPiece()\n        }\n        // if the active index exists, move the piece from that index to this index \n        else if (activeIndex.length > 1){\n            return movePiece()\n        }\n        else if (!isActive){\n            return selectPiece()\n        }\n    }\n\n    \n\n    return (\n      <div\n        style={{ backgroundColor: spaceColor }}\n        onClick={() => handleMove()}\n      >\n        {this.props.owner && (\n          <div\n            style={{\n              width: '100%',\n              height: '100%',\n              fontSize: '40px',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              borderRadius: '50%',\n              backgroundColor: pieceColor,\n              opacity: isActive ? 0.3 : 1\n            }}\n          >\n              {isKing && 'ðŸ‘‘'}\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Space\n","import React, { Component } from 'react'\nimport Space from './Space.js'\n\nclass Board extends Component {\n  state = {\n    spaces: [[], [], [], [], [], [], [], []],\n    pieceSize: 100,\n    activeIndex: [],\n    lastRow: null,\n    lastCol: null,\n    turnMoves: [],\n    player1Color: 'green',\n    player2Color: 'purple',\n    square1Color: 'black',\n    square2Color: 'white',\n    playerTurn: 'player1',\n    skipOptions: 0,\n    gameWinner: null\n  }\n\n  initializeBoard = () => {\n    this.setState(prevState => {\n      let spaces = [...prevState.spaces]\n      let { square1Color, square2Color } = prevState\n      spaces.forEach((row, rowIndex) => {\n        let col = 0\n        while (col < 8) {\n          let owner\n          let evenCol = col % 2 === 0\n          let evenRow = rowIndex % 2 === 0\n          let spaceColor =\n            (evenCol && evenRow) || (!evenCol && !evenRow) ? square1Color : square2Color\n\n          if (evenCol && evenRow) {\n            owner = null\n          } else if (!evenCol && !evenRow) {\n            owner = null\n          } else if (rowIndex < 2) {\n            owner = 'player1'\n          } else if (rowIndex >= 6) {\n            owner = 'player2'\n          } else {\n            owner = null\n          }\n\n          row.push({\n            owner: owner,\n            spaceColor: spaceColor,\n            isKing: false,\n            selected: false\n          })\n          col++\n        }\n      })\n      return spaces\n    })\n  }\n\n  selectPiece = (row, col, owner) => {\n    if (this.state.playerTurn === owner) {\n      this.setState({\n        activeIndex: [row, col]\n      })\n    }\n  }\n\n  unselectPiece = () => {\n    this.setState({\n      activeIndex: []\n    })\n  }\n\n  movePiece = (endingRow, endingCol) => {\n\n    this.setState(prevState => {\n      let spaces = [...prevState.spaces]\n      let activeIndex = [...prevState.activeIndex]\n      let skipOptions = prevState.skipOptions\n      let turnMoves = prevState.turnMoves\n      let playerTurn = prevState.playerTurn\n\n      let startingRow = prevState.activeIndex[0]\n      let startingCol = prevState.activeIndex[1]\n\n      let activeOwner = spaces[startingRow][startingCol].owner\n      let activePiece = spaces[startingRow][startingCol]\n\n      let isVacant = spaces[endingRow][endingCol].owner === null\n\n      let confirmPlacement = didJump => {\n        let finalRowIndex = activeOwner === 'player1' ? spaces.length - 1 : 0\n        let nextPlayer = playerTurn === 'player1' ? 'player2' : 'player1'\n        // sets the owner after sucessful move, preserves king status\n        spaces[endingRow][endingCol].owner = activeOwner\n        spaces[endingRow][endingCol].isKing =\n          spaces[startingRow][startingCol].isKing\n\n        spaces[startingRow][startingCol].owner = null\n        spaces[startingRow][startingCol].isKing = false\n\n        // converts to king when reaches last row\n        if (endingRow === finalRowIndex) {\n          spaces[endingRow][endingCol].isKing = true\n        }\n        turnMoves.push([endingRow, endingCol])\n\n        activeIndex = []\n        console.log(this.validateSkips(spaces, endingRow, endingCol))\n\n        if (!skipOptions) {\n          playerTurn = nextPlayer\n        } // if the ending position returns FALSE when validate skips is run, change sides\n        else if (didJump && !this.validateSkips(spaces, endingRow, endingCol)) {\n          console.log('keep going')\n          playerTurn = nextPlayer\n        } else if (!didJump) {\n          playerTurn = nextPlayer\n        } else {\n          return\n        }\n\n        // dont change sides when above conditionsa are false\n      }\n\n      let removePiece = (row, col) => {\n        spaces[row][col].owner = null\n      }\n\n      let forwardOne = prevState.playerTurn === 'player1' ? 1 : -1\n      let forwardTwo = prevState.playerTurn === 'player1' ? 2 : -2\n\n      let skippedSpotOwner = null\n      let skippedRowIndex = (endingRow + startingRow) / 2\n      let skippedColIndex = (endingCol + startingCol) / 2\n\n      let rowDifference = endingRow - startingRow\n      let colDifference = endingCol - startingCol\n\n      //valid skip => checks if diagonal piece is owned by enemy\n      if (\n        (rowDifference === 2 || rowDifference === -2) &&\n        (colDifference === 2 || colDifference === -2)\n      ) {\n        skippedSpotOwner = spaces[skippedRowIndex][skippedColIndex].owner\n      }\n\n      let validSkip =\n        skippedSpotOwner !== null && skippedSpotOwner !== activeOwner\n\n      // movement for regular pieces, no skip\n      if (\n        rowDifference === forwardOne &&\n        Math.abs(colDifference) === 1 &&\n        isVacant &&\n        !skipOptions\n      ) {\n        // if last item in turn moves array matches active index dont allow\n        console.log(activeIndex, turnMoves)\n        confirmPlacement()\n      }\n      // movement for king pieces, no skip\n      else if (\n        activePiece.isKing &&\n        Math.abs(rowDifference) === 1 &&\n        Math.abs(colDifference) &&\n        isVacant &&\n        !skipOptions\n      ) {\n        confirmPlacement()\n      }\n      // movemnet for regular pieces skipping\n      else if (\n        rowDifference === forwardTwo &&\n        Math.abs(colDifference) === 2 &&\n        isVacant &&\n        validSkip\n      ) {\n        removePiece(skippedRowIndex, skippedColIndex)\n        confirmPlacement(true)\n      }\n      // movement for kings, skip\n      else if (\n        activePiece.isKing &&\n        Math.abs(rowDifference) === 2 &&\n        Math.abs(colDifference) === 2 &&\n        isVacant &&\n        validSkip\n      ) {\n        removePiece(skippedRowIndex, skippedColIndex)\n        confirmPlacement(true)\n      } else {\n        // console.log('idk whats up')\n      }\n\n      return { spaces, activeIndex, turnMoves, playerTurn }\n    })\n  }\n\n  validateSkips = (spaces, rowIndex, colIndex) => {\n\n    let piece = this.state.spaces[rowIndex][colIndex]\n    let canSkip = false\n\n    let normalSkippedVectors =\n      piece.owner === 'player1'\n        ? [\n            [1, 1],\n            [1, -1]\n          ]\n        : [\n            [-1, 1],\n            [-1, -1]\n          ]\n    let normalDestinationVectors =\n      piece.owner === 'player1'\n        ? [\n            [2, 2],\n            [2, -2]\n          ]\n        : [\n            [-2, 2],\n            [-2, -2]\n          ]\n    // requi        to distinguish the directionality between players\n\n    let destinationVectors = piece.isKing\n      ? [\n          [2, 2],\n          [2, -2],\n          [-2, -2],\n          [-2, 2]\n        ]\n      : normalDestinationVectors\n    let skippedVectors = piece.isKing\n      ? [\n          [1, 1],\n          [1, -1],\n          [-1, -1],\n          [-1, 1]\n        ]\n      : normalSkippedVectors\n    // apply a check in all directions if the piece is a king, else use the regular vectors\n\n    for (let i = 0; i < destinationVectors.length; i++) {\n      try {\n        let twoAwayOwner =\n          spaces[rowIndex + destinationVectors[i][0]][\n            colIndex + destinationVectors[i][1]\n          ].owner\n        let oneAwayOwner =\n          spaces[rowIndex + skippedVectors[i][0]][\n            colIndex + skippedVectors[i][1]\n          ].owner\n\n        if (\n          twoAwayOwner === null &&\n          oneAwayOwner !== piece.owner &&\n          oneAwayOwner !== null\n        ) {\n          canSkip = true\n        }\n      } catch {\n      }\n    }\n\n    return canSkip\n  }\n\n  checkForMoves = () => {\n    let { spaces } = this.state\n    let skipOptions = 0\n\n    spaces.forEach((row, rowIndex) => {\n      row.forEach((space, colIndex) => {\n        if (space.owner === this.state.playerTurn) {\n          // goes through each piece that belongs to the player whose turn it is, checks the status of adjacent pieces\n          // to see if there are potential moves that can be made.\n\n          let normalSkippedVectors =\n            space.owner === 'player1'\n              ? [\n                  [1, 1],\n                  [1, -1]\n                ]\n              : [\n                  [-1, 1],\n                  [-1, -1]\n                ]\n          let normalDestinationVectors =\n            space.owner === 'player1'\n              ? [\n                  [2, 2],\n                  [2, -2]\n                ]\n              : [\n                  [-2, 2],\n                  [-2, -2]\n                ]\n          // required to distinguish the directionality between players\n\n          let destinationVectors = space.isKing\n            ? [\n                [2, 2],\n                [2, -2],\n                [-2, -2],\n                [-2, 2]\n              ]\n            : normalDestinationVectors\n          let skippedVectors = space.isKing\n            ? [\n                [1, 1],\n                [1, -1],\n                [-1, -1],\n                [-1, 1]\n              ]\n            : normalSkippedVectors\n          // apply a check in all directions if the piece is a king, else use the regular vectors\n\n          for (let i = 0; i < destinationVectors.length; i++) {\n            try {\n              let twoAwayOwner =\n                spaces[rowIndex + destinationVectors[i][0]][\n                  colIndex + destinationVectors[i][1]\n                ].owner\n              let oneAwayOwner =\n                spaces[rowIndex + skippedVectors[i][0]][\n                  colIndex + skippedVectors[i][1]\n                ].owner\n\n              if (\n                twoAwayOwner === null &&\n                oneAwayOwner !== space.owner &&\n                oneAwayOwner !== null\n              ) {\n                skipOptions++\n              }\n            } catch {\n            }\n          }\n        }\n      })\n    })\n    this.setState({\n      skipOptions: skipOptions\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.playerTurn !== prevState.playerTurn) {\n      this.checkForMoves()\n      this.checkForWin()\n    }\n  }\n\n  checkForWin = () => {\n     let { spaces } = this.state\n     let status = null\n     spaces.forEach((row) => {\n        if (row.some(space => space.owner !== 'player1')){\n            status = 'player1 lost'\n        } else if (row.some(space => space.owner !== 'player2')){\n            status = 'player2 lost'\n        } else {\n            status = null\n        }\n     })\n     this.setState({\n         gameWinner: status\n     })\n  }\n\n  componentDidMount() {\n    this.initializeBoard()\n  }\n\n  changeSides = () => {\n    this.setState(prevState => {\n      let player = prevState.playerTurn === 'player1' ? 'player2' : 'player1'\n\n      return { playerTurn: player }\n    })\n  }\n\n  triggerHover = event => {\n    this.setState({\n      mouseX: event.pageX,\n      mouseY: event.pageY\n    })\n  }\n\n  render() {\n    let {\n      spaces,\n      activeIndex,\n      playerTurn,\n      pieceSize,\n      mouseX,\n      mouseY,\n      player1Color,\n      player2Color\n    } = this.state\n\n    const checkerBoard = spaces.map((row, rowIndex) => {\n      return row.map((spaceData, columnIndex) => {\n        return (\n          <Space\n            key={`${rowIndex} ${columnIndex}`}\n            {...spaceData}\n            playerTurn={playerTurn}\n            selectPiece={() =>\n              this.selectPiece(rowIndex, columnIndex, spaceData.owner)\n            }\n            unselectPiece={() => this.unselectPiece()}\n            movePiece={() => this.movePiece(rowIndex, columnIndex)}\n            checkForMoves={this.checkForMoves}\n            player1Color={player1Color}\n            player2Color={player2Color}\n            row={rowIndex}\n            col={columnIndex}\n            activeIndex={activeIndex}\n          />\n        )\n      })\n    })\n\n    return (\n      <React.Fragment>\n        {activeIndex.length !== 0 && (\n          <div\n            style={{\n              width: `${pieceSize}px`,\n              height: `${pieceSize}px`,\n              borderRadius: '50%',\n              backgroundColor:\n                playerTurn === 'player1' ? player1Color : player2Color,\n              position: 'absolute',\n              pointerEvents: 'none',\n              left: `calc(${mouseX}px - (${pieceSize}px / 2)`,\n              top: `calc(${mouseY}px - (${pieceSize}px / 2)`\n            }}\n          />\n        )}\n        <div\n          onMouseMove={event => this.triggerHover(event)}\n          style={{\n            display: 'grid',\n            gridTemplateRows: `repeat(8, 100px)`,\n            cursor: activeIndex.length !== 0 && 'grabbing',\n            gridTemplateColumns: `repeat(8, 100px)`\n          }}\n        >\n          {checkerBoard}\n        </div>\n\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Board\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './Board.js'\n\n\n\nclass App extends Component {\n  render() {\n    \n    return (\n      <div>\n        <Board />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}